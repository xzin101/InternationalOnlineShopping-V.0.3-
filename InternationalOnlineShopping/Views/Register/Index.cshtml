@model InternationalOnlineShopping.Models.Member
@{
    ViewBag.Title = "Index";
    Layout = null;
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/Register.js"></script>


@using (Html.BeginForm("Login", "Register", FormMethod.Post, new { onSubmit = "return Login(this);" }))
{
    @Html.AntiForgeryToken()
    <div class="container" style="margin-top:10%">
        <div class="row">
            <div class="col-md-4 col-md-offset-4 alert alert-info">
                <h3 class="text-center">INT'L ONLINE SHOPPING</h3>
                <form id="loginForm">
                    @*<div id="msg"><ul style="color:red;">Invalid Username Or Password</ul></div>*@
                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-envelope"></i></span>
                            @Html.ValidationMessageFor(x => x.LoginViewModel.UserEmailId, "", new { @class = "text-danger" })
                            @Html.EditorFor(x => x.LoginViewModel.UserEmailId, new { htmlAttributes = new { @class = "form-control", placeholder = "Email", id = "txtEmail" } })

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                            @Html.ValidationMessageFor(x => x.LoginViewModel.Password, "", new { @class = "text-danger" })
                            @Html.EditorFor(x => x.LoginViewModel.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "Password", type = "password" } })

                        </div>
                    </div>
                </form>

                <div class="form-group">
                    <button class="btn btn-info form-control" type="submit"><i class="glyphicon-log-in"></i>Login</button>
                </div>
                <div class="form-group">
                    <a style="float:left" onclick="SignUpVendor()">Signup As Vendor</a><a style="float:right; cursor:pointer" onclick="SignUpCustomer()">Signup As Customer</a>
                </div>
            </div>
        </div>
    </div>
}

    @*Design Modal With Vendor Registration Form*@

    @using (Html.BeginForm("Create", "Register", FormMethod.Post@*, new { onSubmit = "return SaveProduct(this);" }*@))
{
@Html.AntiForgeryToken()
<div class="modal fade" id="ShowModalVendor">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 style="text-align:center">Vendor Registration</h4>

                <div id="SuccessMessage">
                    <div class="alert alert-success">
                        <span class="glyphicon glyphicon-ok"></span><strong>Success Message! Your Registration is Complete</strong>
                    </div>
                </div>
                <div id="ErrorMessage">
                    <div class="alert alert-success">
                        <span class="glyphicon glyphicon-remove"></span><strong>Error Message! Your Registration is Not Complete</strong>
                    </div>
                </div>
            </div>
            <div class="modal-body">


                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", placeholder = "Email", id = "txtEmail" } })


                    </div>
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "Password", type = "password" } })


                    </div>
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                        @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.VendorName, new { htmlAttributes = new { @class = "form-control", placeholder = "Vendor Name" } })


                    </div>
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-phone-alt"></i></span>
                        @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Contact Number" } })


                    </div>
                </div>



                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "City" } })


                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", placeholder = "State" } })


                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-map-marker"></i></span>
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Zipcode" } })


                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-globe"></i></span>
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", placeholder = "Country" } })


                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                        @Html.ValidationMessageFor(model => model.RegistrationFee, "", new { @class = "text-danger" })
                        @Html.EditorFor(model => model.RegistrationFee, new { htmlAttributes = new { @class = "form-control", placeholder = "Registration Fee" } })


                    </div>
                </div>

                <div class="form-group">
                    <button class="btn btn-info form-control" type="submit" onsubmit="SaveProduct(this)"><i class="glyphicon glyphicon-registration-mark">Register</i></button>
                </div>

            </div>
        </div>
    </div>
</div>
}

    @*Design Modal With Customer Registration Form*@
    @using (Html.BeginForm("Create", "Register", FormMethod.Post, new { onSubmit = "return SaveProduct(this);" }))
    {
        @Html.AntiForgeryToken()
        <div class="modal fade" id="ShowModalCustomer">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <a href="#" class="close" data-dismiss="modal">&times;</a>
                        <h4 style="text-align:center">Customer Registration</h4>
                    </div>
                    <div class="modal-body">


                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", placeholder = "Email" } })

                            </div>
                        </div>

                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "Password", type = "password" } })

                            </div>
                        </div>

                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })

                            </div>
                        </div>

                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })

                            </div>
                        </div>

                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-phone"></i></span>
                                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Contact Number" } })

                            </div>
                        </div>



                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "City" } })

                            </div>
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-home"></i></span>
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", placeholder = "State" } })

                            </div>
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-map-marker"></i></span>
                                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Zipcode" } })

                            </div>
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-globe"></i></span>
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", placeholder = "Country" } })

                            </div>
                        </div>

                        <div class="form-group">
                            <button class="btn btn-info form-control" type="submit"><i class="glyphicon glyphicon-registration-mark">Register</i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @section scripts{
        <script>
        $(function () {
            let successMessage = '@TempData["SuccessMessage"]'
            if (successMessage)
            {
                alertify.success(successMessage);
            }

    });

        </script>
    }